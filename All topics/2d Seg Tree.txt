//2d Seg Tree max + sum
#define INF 9999999999
int a[1003][1003]; //the array to save input matrix // 1 based of dimension r*c
int t[3*1005][3*1005]; //For sum
int tmn[3*1005][3*1005]; //For max/min
int r,c; // Number of rows, Number of columns
inline int max(int a,int b)
{
    if(a>b)
        return a;
    return b;
}
inline int min(int a,int b)
{
    if(a>b)
        return b;
    return a;
}
void build_y (int vx, int lx, int rx, int vy, int ly, int ry)
{
    if (ly == ry)
        if (lx == rx)
            t[vx][vy] = a[lx][ly];
        else
            t[vx][vy] = t[vx*2][vy] + t[vx*2+1][vy];
    else
    {
        int my = (ly + ry) / 2;
        build_y (vx, lx, rx, vy*2, ly, my);
        build_y (vx, lx, rx, vy*2+1, my+1, ry);
        t[vx][vy] = t[vx][vy*2] + t[vx][vy*2+1];
    }
}

void build_x (int vx, int lx, int rx)
{
    if (lx != rx)
    {
        int mx = (lx + rx) / 2;
        build_x (vx*2, lx, mx);
        build_x (vx*2+1, mx+1, rx);
    }
    build_y (vx, lx, rx, 1, 1, c);
}

int sum_y (int vx, int vy, int tly, int try_, int ly, int ry)
{
    if (ly > ry)
        return 0;
    if (ly == tly && try_ == ry)
        return t[vx][vy];
    int tmy = (tly + try_) / 2;
    return sum_y (vx, vy*2, tly, tmy, ly, min(ry,tmy))
           + sum_y (vx, vy*2+1, tmy+1, try_, max(ly,tmy+1), ry);
}

int sum_x (int vx, int tlx, int trx, int lx, int rx, int ly, int ry)
{
    if (lx > rx)
        return 0;
    if (lx == tlx && trx == rx)
        return sum_y (vx, 1, 1, c, ly, ry);
    int tmx = (tlx + trx) / 2;
    return sum_x (vx*2, tlx, tmx, lx, min(rx,tmx), ly, ry)
           + sum_x (vx*2+1, tmx+1, trx, max(lx,tmx+1), rx, ly, ry);
}


//For RMQ

void build_y_mn (int vx, int lx, int rx, int vy, int ly, int ry)
{
    if (ly == ry)
        if (lx == rx)
            tmn[vx][vy] = a[lx][ly];
        else
            tmn[vx][vy] = max(tmn[vx*2][vy] , tmn[vx*2+1][vy]);
    else
    {
        int my = (ly + ry) / 2;
        build_y_mn (vx, lx, rx, vy*2, ly, my);
        build_y_mn (vx, lx, rx, vy*2+1, my+1, ry);
        tmn[vx][vy] = max(tmn[vx][vy*2] , tmn[vx][vy*2+1]);
    }
}

void build_x_mn (int vx, int lx, int rx)
{
    if (lx != rx)
    {
        int mx = (lx + rx) / 2;
        build_x_mn (vx*2, lx, mx);
        build_x_mn (vx*2+1, mx+1, rx);
    }
    build_y_mn (vx, lx, rx, 1, 1, c);
}

int min_y (int vx, int vy, int tly, int try_, int ly, int ry)
{
    if (ly > ry)
        return -INF;
    if (ly == tly && try_ == ry)
        return tmn[vx][vy];
    int tmy = (tly + try_) / 2;
    return max(min_y (vx, vy*2, tly, tmy, ly, min(ry,tmy))
               , min_y (vx, vy*2+1, tmy+1, try_, max(ly,tmy+1), ry));
}

int min_x (int vx, int tlx, int trx, int lx, int rx, int ly, int ry)
{
    if (lx > rx)
        return -INF;
    if (lx == tlx && trx == rx)
        return min_y (vx, 1, 1, c, ly, ry);
    int tmx = (tlx + trx) / 2;
    return max(min_x (vx*2, tlx, tmx, lx, min(rx,tmx), ly, ry)
               , min_x (vx*2+1, tmx+1, trx, max(lx,tmx+1), rx, ly, ry));
}

//Usage
build_x(1,1,r); // r is rows
build_x_mn(1,1,r); // r is rows


cur_sum = sum_x(1,1,r,i,i+a-1,j,j+b-1); //r is rows, last 4 parameters are in the form (start_row,start_column,row_diff,col_diff) // everything is 1 based
cur_min = min_x(1,1,r,i,i+a-1,j,j+b-1); //So, I get answer for submatrix (start_row,start_column,start_row+row_diff-1,start_column + col_diff - 1);
